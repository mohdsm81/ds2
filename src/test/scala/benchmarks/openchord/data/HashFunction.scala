package benchmarks.openchord.data


import java.security.MessageDigest
/**
 * Provides a hash function for calculating the hash value out of {@link Key} or
 * {@link URL} objects.
 * 
 * @author Zepeng Zhao
 */

object HashFunction {
  
  val messageDigest:MessageDigest = MessageDigest.getInstance("SHA-1")
    
  /**
   * Returns the length of IDs generated by this hash function.
   * 
   * @return Number of bytes of generated IDs.
   */
   def getLengthOfIDsInBytes():Int = {
    return this.messageDigest.getDigestLength();
  }
  
  /**
   * Calculates the hash value for a given data Key.
   * 
   * @param Byte Array
   * @return ID for the given Key.
   */
  def createID( testBytes:Array[Byte]):ID = {
    /**
     * synchronize access to messageDigest, so that messageDigest cannot be
     * reset by another thread before calculating digest.
     */
    this.messageDigest.synchronized{
      this.messageDigest.reset();
      this.messageDigest.update(testBytes);
      return new ID(this.messageDigest.digest());
    }   
  }
  
    
  /**
   * Calculates the hash value for a given data Key.
   * 
   * @param String
   * @return ID for the given Key.
   */
  def createID( str:String):ID = {
    var testBytes = str.getBytes
    /**
     * synchronize access to messageDigest, so that messageDigest cannot be
     * reset by another thread before calculating digest.
     */
    this.messageDigest.synchronized{
      this.messageDigest.reset();
      this.messageDigest.update(testBytes);
      return new ID(this.messageDigest.digest());
    }   
  }
  
  

}